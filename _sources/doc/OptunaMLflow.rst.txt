.. _OptunaMLflow_doc:

:class:`~hpoflow.optuna_mlflow.OptunaMLflow`
============================================

.. seealso::
   Code documentation can be found here: :ref:`code documentation page <optuna_mlflow_code_doc>`

The :class:`~hpoflow.optuna_mlflow.OptunaMLflow` class is used as a decorator for
`Optuna <https://optuna.readthedocs.io/>`__ objective functions. This looks like this:

.. code-block:: python

   @OptunaMLflow()
   def objective(trial):
     x = trial.suggest_float("x", -10, 10)
     return (x - 2) ** 2

   study = optuna.create_study()
   study.optimize(objective, n_trials=100)

If this decorator is applied the Optuna :class:`optuna.study.Study` object is augmented.
This augmentation entails logging information to `Optuna <https://optuna.readthedocs.io/>`__
and `MLflow <https://www.mlflow.org/docs/latest/index.html>`__ in parallel.

You can use Optuna and the Trial object as you are used to. The following is automatically logged in parallel:

* the Optuna distributions and parameters (name and ranges)
* the sampled hyperparameters
* the objective result
* exceptions with traceback
* the direction of the study (``MINIMIZE`` or ``MAXIMIZE``)
* hostname and process id

Logging Nested Runs when using Cross-validation
-----------------------------------------------

.. todo::
   add content
